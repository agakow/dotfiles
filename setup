#!/usr/bin/env bash
#
# bootstrap installs things.

export DOTFILES="$HOME/Projects/dotfiles"

set -e # Abort on error

echo ''

source $DOTFILES/helpers

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "Removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "Moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "Skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "Linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'Installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

install_homebrew_and_download_apps() {
  info "Installing dependencies"
  if source $DOTFILES/bin/dot | while read -r data; do info "$data"; done
  then
    success "Dependencies installed"
  else
    fail "Error installing dependencies"
  fi
}

# dscl . read "$HOME" UserShell - check the users shell
change_shell_to_zsh() {
  info "Checking if zsh shell set up"
  local current_shell="$(dscl . read "$HOME" UserShell 2>/dev/null | cut -d" " -f2)"
  local desired_zsh="/usr/local/bin/zsh"
  local shell_path="$(which zsh)"

  if [ "$shell_path" == "$desired_zsh" ] && [ "$current_shell" != "$desired_zsh" ]
  then
    info "Changing your shell to zsh ..."
    if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
      info "Adding '$shell_path' to /etc/shells"
      sudo sh -c "echo $shell_path >> /etc/shells"
    fi
    chsh -s "$shell_path"
  fi
}

install_atom_packages() {
  if [ "$(which atom)" ]
    local packages="$DOTFILES/atom.symlink/packages.list"
  then
    if [ -f $packages ] && [[ "Yes" == $(ask "install atom packages") ]]
    then
      info 'Installing atom packages'
      apm install --packages-file $packages
      success "Atom packages installed"
    fi
  fi
}

install_sublime_package() {
  if [ "$(which subl)" ]
    local sublime_dir="$HOME/Library/Application Support/Sublime Text 3"
    local user_dir="$sublime_dir/Packages/User"
    local package_control="$sublime_dir/Installed Packages/Package Control.sublime-package"
  then
    if [ ! -f "$package_control" ]
    then
      info "Downloading Package Control..."
      wget "https://sublime.wbond.net/Package Control.sublime-package" -o "$package_control"
    fi

    info "Configuring desired packages..."
    rm -f "$user_dir/Package Control.sublime-settings"
    ln -s "$DOTFILES/sublime/Package Control.sublime-settings" "$user_dir/Package Control.sublime-settings"

    info "Configuring User Settings..."
    rm -f "$user_dir/Preferences.sublime-settings"
    ln -s "$DOTFILES/sublime/Preferences.sublime-settings" "$user_dir/Preferences.sublime-settings"

    success "Sublime packages and configuration complete"
  fi
}

install_homebrew_and_download_apps # needs to run before shell change
# change_shell_to_zsh
# install_dotfiles
install_sublime_package
# install_atom_packages # needs to run after atom is installed

echo ''
success 'All installed!'
